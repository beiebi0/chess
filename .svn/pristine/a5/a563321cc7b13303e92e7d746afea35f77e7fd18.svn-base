package org.yuehlinchung.hw6.client;

import java.util.Collections;
import java.util.List;

import org.shared.chess.Color;
import org.shared.chess.GameResult;
import org.shared.chess.Move;
import org.shared.chess.State;
import org.yuehlinchung.hw2.StateChangerImpl;

import com.google.common.collect.Lists;

public class AlphaBetaPruning {
	
	private StateChangerImpl changer = new StateChangerImpl();
	
	static class TimeoutException extends RuntimeException {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
	}
	
	@SuppressWarnings("hiding")
	static class MoveScore<Move> implements Comparable<MoveScore<Move>> {
		Move move;
		int score;
		
		@Override
		public int compareTo(MoveScore<Move> o) {
			return o.score = score; // sort DESC (best score first)
		}
	}
	
	private Heuristic heuristic;
	
	public AlphaBetaPruning(Heuristic heuristic) {
		this.heuristic = heuristic;
	}
	
	public Move findBestMove(State state, int depth, Timer timer) {
		boolean isWhite = state.getTurn().isWhite();
		List<MoveScore<Move>> scores = Lists.newArrayList();
		{
			Iterable<Move> possibleMoves = heuristic.getOrderedMoves(state);
			for (Move move : possibleMoves) {
				MoveScore<Move> score = new MoveScore<Move>();
				score.move = move;
				score.score = Integer.MIN_VALUE;
				scores.add(score);
			}
		}
		
		try {
			for (int i = 0; i < depth; i++) {
				for (MoveScore<Move> moveScore : scores) {
					Move move = moveScore.move;
					State testState = state.copy();
					changer.makeMove(testState, move);
					int score = 
							findMovesScore(testState, i, Integer.MIN_VALUE, Integer.MAX_VALUE, timer);
					if (!isWhite) {
						// the scores are from the point of view of the white, so for black we need to switch.
						score = -score;
					}
					moveScore.score = score;
				}
				Collections.sort(scores);
			}
		} catch (TimeoutException e) {
			
		}
		Collections.sort(scores);
		if (scores.size() == 0) {
			return null;
		} else {
			return scores.get(0).move;
		}
	}
	

	/**
	  * If we get a timeout, then the score is invalid.
	  */
	private int findMovesScore(State state, int depth, int alpha, int beta, Timer timer) 
			throws TimeoutException {
		if (timer.didTimeout()) {
			throw new TimeoutException();
		}
		GameResult over = state.getGameResult();
		if (depth == 0 || over != null) {
			return heuristic.getStateValue(state);
		}
		Color color = state.getTurn();
		int scoreSum = 0;
		int count = 0;
		Iterable<Move> possibleMoves = heuristic.getOrderedMoves(state);
		for (Move move : possibleMoves) {
			count++;
			State testState = state.copy();
			changer.makeMove(testState, move);
			int childScore = findMovesScore(testState, depth - 1, alpha, beta, timer);
			if (color == null) {
				scoreSum += childScore;
			} else if (color.isWhite()) {
				alpha = Math.max(alpha, childScore);
				if (beta <= alpha) {
					break;
				}
			} else {
				beta = Math.min(beta, childScore);
				if (beta <= alpha) {
					break;
				}
			}
		}
		return color == null ? scoreSum / count : color.isWhite() ? alpha : beta;
	}
	
}